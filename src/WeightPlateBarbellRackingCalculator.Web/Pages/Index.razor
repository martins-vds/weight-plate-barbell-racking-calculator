@page "/"

@inject IJSRuntime jsRuntime

<PageTitle>Index</PageTitle>

<EditForm Model="@_calculationOptions" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudNumericField Label="Total Weight"
                             For="@(() => _calculationOptions.TotalWeight)"
                             @bind-Value="_calculationOptions.TotalWeight"
                             HelperText="Total weight including the weight of the bar"
                             Adornment="Adornment.End"
                             AdornmentText="@weightSymbols[0]"
                             Min="0.0" 
                             Clearable="true" 
                             Step="5" />
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudNumericField Label="Weight Percentage"
                             For="@(() => _calculationOptions.WeightPercentage)"
                             @bind-Value="_calculationOptions.WeightPercentage"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Filled.Percent" 
                             Min="1"
                             Clearable="true" 
                             Step="5"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudNumericField Label="Bar Weight"
                             For="@(() => _calculationOptions.BarWeight)"
                             @bind-Value="_calculationOptions.BarWeight"
                             Adornment="Adornment.End"
                             AdornmentText="@weightSymbols[0]"
                             Min="0.0"
                             Clearable="true" 
                             Step="5" />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" ButtonType="ButtonType.Submit">Calculate Plates</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@if (successfulValidation)
{
    <div @ref="rackPlatesElement">
        @if (RackPlates != null)
        {
            @if (RackPlates?.Plates?.Any() ?? false)
            {
                <MudItem xs="12">

                    <MudText Typo="Typo.h6" Class="mt-8 ml-3 mb-3">Plate Pairs</MudText>
                    <MudTable Items="RackPlates?.Plates">
                        <HeaderContent>
                            <MudTh>Weight (@weightSymbols[0])</MudTh>
                            <MudTh>Required</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Weight">@context.Weight</MudTd>
                            <MudTd DataLabel="Required">@context.Quantity</MudTd>
                        </RowTemplate>
                    </MudTable>

                </MudItem>
            }
            else
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" Class="mt-8 ml-3 mb-3">It was not possible to calculate plates given the current values.</MudAlert>
            }
        }
    </div>
}

@code {
    public double Weight { get; set; }
    public double Percentage { get; set; }
    private readonly string[] PercentageLabels = new string[] { "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%" };
    public double BarWeight { get; set; }
    public RackPlates? RackPlates { get; set; }


    public CalculationOptions _calculationOptions = new CalculationOptions(){ Rounding = 5.0 };
    private bool successfulValidation;

    private bool focusOnResults = false;
    private ElementReference rackPlatesElement;

    private string[] weightSymbols = new string[]
    {
        "Lb",
        "Kg"
    };

    private PlatesCalculator calculator = new PlatesCalculator();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (successfulValidation && focusOnResults)
        {
            await jsRuntime.InvokeVoidAsync("SetFocusToElement", rackPlatesElement);
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        RackPlates = calculator.Calculate(_calculationOptions);
        successfulValidation = true;
        focusOnResults = true;
        StateHasChanged();
        focusOnResults = false;
    }
}
